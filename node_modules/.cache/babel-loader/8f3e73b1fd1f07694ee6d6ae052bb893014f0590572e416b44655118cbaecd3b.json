{"ast":null,"code":"var _jsxFileName = \"/Users/Ksquare/Documents/Software/home/src/components/home/Project.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Jumbotron } from \"./migration\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null\n};\nconst API = \"https://api.github.com\";\nconst Project = _ref => {\n  _s();\n  let {\n    heading,\n    username,\n    length,\n    specfic\n  } = _ref;\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(dummyProject);\n  const [projectsArray, setProjectsArray] = useState([]);\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // Fetching all repos\n      const response = await axios.get(allReposAPI);\n      repoList = [...response.data.slice(0, length)];\n      // Adding specific repos\n      for (let repoName of specfic) {\n        const response = await axios.get(`${specficReposAPI}/${repoName}`);\n        repoList.push(response.data);\n      }\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n  return /*#__PURE__*/_jsxDEV(Jumbotron, {\n    fluid: true,\n    id: \"projects\",\n    className: \"m-0\",\n    style: {\n      backgroundColor: \"#121212\",\n      // Fondo gris oscuro estilo programador\n      color: \"#ffffff\",\n      // Texto en blanco para mejor contraste\n      padding: \"50px 0\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"display-4 pb-5 text-center\",\n        style: {\n          color: \"#00d2ff\",\n          // Color de texto moderno similar al de MainBody\n          fontFamily: \"'Pixelify Sans', sans-serif\" // Aplicar la misma tipografía\n        },\n        children: heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: projectsArray.length ? projectsArray.map((project, index) => /*#__PURE__*/_jsxDEV(ProjectCard, {\n          id: `project-card-${index}`,\n          value: project\n        }, `project-card-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }, this)) : dummyProjectsArr.map((project, index) => /*#__PURE__*/_jsxDEV(ProjectCard, {\n          id: `dummy-${index}`,\n          value: project\n        }, `dummy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Project, \"G5dpdOZzE5rK+Ni7q0RvIF0vkjM=\");\n_c = Project;\nexport default Project;\nvar _c;\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Container","Jumbotron","Row","ProjectCard","axios","jsxDEV","_jsxDEV","dummyProject","name","description","svn_url","stargazers_count","languages_url","pushed_at","API","Project","_ref","_s","heading","username","length","specfic","allReposAPI","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","response","get","data","slice","repoName","push","error","console","message","fluid","id","className","style","backgroundColor","color","padding","children","fontFamily","fileName","_jsxFileName","lineNumber","columnNumber","map","project","index","value","_c","$RefreshReg$"],"sources":["/Users/Ksquare/Documents/Software/home/src/components/home/Project.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Jumbotron } from \"./migration\";\nimport Row from \"react-bootstrap/Row\";\nimport ProjectCard from \"./ProjectCard\";\nimport axios from \"axios\";\n\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null,\n};\nconst API = \"https://api.github.com\";\n\nconst Project = ({ heading, username, length, specfic }) => {\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\n    dummyProject\n  );\n\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // Fetching all repos\n      const response = await axios.get(allReposAPI);\n      repoList = [...response.data.slice(0, length)];\n      // Adding specific repos\n      for (let repoName of specfic) {\n        const response = await axios.get(`${specficReposAPI}/${repoName}`);\n        repoList.push(response.data);\n      }\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n\n  return (\n    <Jumbotron\n      fluid\n      id=\"projects\"\n      className=\"m-0\"\n      style={{\n        backgroundColor: \"#121212\", // Fondo gris oscuro estilo programador\n        color: \"#ffffff\", // Texto en blanco para mejor contraste\n        padding: \"50px 0\",\n      }}\n    >\n      <Container>\n        <h2\n          className=\"display-4 pb-5 text-center\"\n          style={{\n            color: \"#00d2ff\", // Color de texto moderno similar al de MainBody\n            fontFamily: \"'Pixelify Sans', sans-serif\", // Aplicar la misma tipografía\n          }}\n        >\n          {heading}\n        </h2>\n        <Row>\n          {projectsArray.length\n            ? projectsArray.map((project, index) => (\n                <ProjectCard\n                  key={`project-card-${index}`}\n                  id={`project-card-${index}`}\n                  value={project}\n                />\n              ))\n            : dummyProjectsArr.map((project, index) => (\n                <ProjectCard\n                  key={`dummy-${index}`}\n                  id={`dummy-${index}`}\n                  value={project}\n                />\n              ))}\n        </Row>\n      </Container>\n    </Jumbotron>\n  );\n};\n\nexport default Project;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}