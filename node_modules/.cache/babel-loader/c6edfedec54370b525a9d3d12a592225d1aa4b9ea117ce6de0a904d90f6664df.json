{"ast":null,"code":"import _classCallCheck from \"/Users/Ksquare/Documents/Software/home/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/Ksquare/Documents/Software/home/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/Ksquare/Documents/Software/home/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/Ksquare/Documents/Software/home/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\nvar WillChangeMotionValue = /*#__PURE__*/function (_MotionValue) {\n  _inherits(WillChangeMotionValue, _MotionValue);\n  var _super = _createSuper(WillChangeMotionValue);\n  function WillChangeMotionValue() {\n    var _this;\n    _classCallCheck(this, WillChangeMotionValue);\n    _this = _super.apply(this, arguments);\n    _this.output = [];\n    _this.counts = new Map();\n    return _this;\n  }\n  _createClass(WillChangeMotionValue, [{\n    key: \"add\",\n    value: function add(name) {\n      var _this2 = this;\n      var styleName = getWillChangeName(name);\n      if (!styleName) return;\n      /**\n       * Update counter. Each value has an indepdent counter\n       * as multiple sources could be requesting the same value\n       * gets added to will-change.\n       */\n      var prevCount = this.counts.get(styleName) || 0;\n      this.counts.set(styleName, prevCount + 1);\n      if (prevCount === 0) {\n        this.output.push(styleName);\n        this.update();\n      }\n      /**\n       * Prevents the remove function from being called multiple times.\n       */\n      var hasRemoved = false;\n      return function () {\n        if (hasRemoved) return;\n        hasRemoved = true;\n        var newCount = _this2.counts.get(styleName) - 1;\n        _this2.counts.set(styleName, newCount);\n        if (newCount === 0) {\n          removeItem(_this2.output, styleName);\n          _this2.update();\n        }\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n    }\n  }]);\n  return WillChangeMotionValue;\n}(MotionValue);\nexport { WillChangeMotionValue };","map":{"version":3,"names":["MotionValue","getWillChangeName","removeItem","WillChangeMotionValue","_MotionValue","_inherits","_super","_createSuper","_this","_classCallCheck","apply","arguments","output","counts","Map","_createClass","key","value","add","name","_this2","styleName","prevCount","get","set","push","update","hasRemoved","newCount","length","join"],"sources":["/Users/Ksquare/Documents/Software/home/node_modules/framer-motion/dist/es/value/use-will-change/WillChangeMotionValue.mjs"],"sourcesContent":["import { MotionValue } from '../index.mjs';\nimport { getWillChangeName } from './get-will-change-name.mjs';\nimport { removeItem } from '../../utils/array.mjs';\n\nclass WillChangeMotionValue extends MotionValue {\n    constructor() {\n        super(...arguments);\n        this.output = [];\n        this.counts = new Map();\n    }\n    add(name) {\n        const styleName = getWillChangeName(name);\n        if (!styleName)\n            return;\n        /**\n         * Update counter. Each value has an indepdent counter\n         * as multiple sources could be requesting the same value\n         * gets added to will-change.\n         */\n        const prevCount = this.counts.get(styleName) || 0;\n        this.counts.set(styleName, prevCount + 1);\n        if (prevCount === 0) {\n            this.output.push(styleName);\n            this.update();\n        }\n        /**\n         * Prevents the remove function from being called multiple times.\n         */\n        let hasRemoved = false;\n        return () => {\n            if (hasRemoved)\n                return;\n            hasRemoved = true;\n            const newCount = this.counts.get(styleName) - 1;\n            this.counts.set(styleName, newCount);\n            if (newCount === 0) {\n                removeItem(this.output, styleName);\n                this.update();\n            }\n        };\n    }\n    update() {\n        this.set(this.output.length ? this.output.join(\", \") : \"auto\");\n    }\n}\n\nexport { WillChangeMotionValue };\n"],"mappings":";;;;AAAA,SAASA,WAAW,QAAQ,cAAc;AAC1C,SAASC,iBAAiB,QAAQ,4BAA4B;AAC9D,SAASC,UAAU,QAAQ,uBAAuB;AAAC,IAE7CC,qBAAqB,0BAAAC,YAAA;EAAAC,SAAA,CAAAF,qBAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,qBAAA;EACvB,SAAAA,sBAAA,EAAc;IAAA,IAAAK,KAAA;IAAAC,eAAA,OAAAN,qBAAA;IACVK,KAAA,GAAAF,MAAA,CAAAI,KAAA,OAASC,SAAS;IAClBH,KAAA,CAAKI,MAAM,GAAG,EAAE;IAChBJ,KAAA,CAAKK,MAAM,GAAG,IAAIC,GAAG,CAAC,CAAC;IAAC,OAAAN,KAAA;EAC5B;EAACO,YAAA,CAAAZ,qBAAA;IAAAa,GAAA;IAAAC,KAAA,EACD,SAAAC,IAAIC,IAAI,EAAE;MAAA,IAAAC,MAAA;MACN,IAAMC,SAAS,GAAGpB,iBAAiB,CAACkB,IAAI,CAAC;MACzC,IAAI,CAACE,SAAS,EACV;MACJ;AACR;AACA;AACA;AACA;MACQ,IAAMC,SAAS,GAAG,IAAI,CAACT,MAAM,CAACU,GAAG,CAACF,SAAS,CAAC,IAAI,CAAC;MACjD,IAAI,CAACR,MAAM,CAACW,GAAG,CAACH,SAAS,EAAEC,SAAS,GAAG,CAAC,CAAC;MACzC,IAAIA,SAAS,KAAK,CAAC,EAAE;QACjB,IAAI,CAACV,MAAM,CAACa,IAAI,CAACJ,SAAS,CAAC;QAC3B,IAAI,CAACK,MAAM,CAAC,CAAC;MACjB;MACA;AACR;AACA;MACQ,IAAIC,UAAU,GAAG,KAAK;MACtB,OAAO,YAAM;QACT,IAAIA,UAAU,EACV;QACJA,UAAU,GAAG,IAAI;QACjB,IAAMC,QAAQ,GAAGR,MAAI,CAACP,MAAM,CAACU,GAAG,CAACF,SAAS,CAAC,GAAG,CAAC;QAC/CD,MAAI,CAACP,MAAM,CAACW,GAAG,CAACH,SAAS,EAAEO,QAAQ,CAAC;QACpC,IAAIA,QAAQ,KAAK,CAAC,EAAE;UAChB1B,UAAU,CAACkB,MAAI,CAACR,MAAM,EAAES,SAAS,CAAC;UAClCD,MAAI,CAACM,MAAM,CAAC,CAAC;QACjB;MACJ,CAAC;IACL;EAAC;IAAAV,GAAA;IAAAC,KAAA,EACD,SAAAS,OAAA,EAAS;MACL,IAAI,CAACF,GAAG,CAAC,IAAI,CAACZ,MAAM,CAACiB,MAAM,GAAG,IAAI,CAACjB,MAAM,CAACkB,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC;IAClE;EAAC;EAAA,OAAA3B,qBAAA;AAAA,EAvC+BH,WAAW;AA0C/C,SAASG,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}