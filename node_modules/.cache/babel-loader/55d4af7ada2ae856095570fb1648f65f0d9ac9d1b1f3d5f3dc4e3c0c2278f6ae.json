{"ast":null,"code":"import _slicedToArray from \"/Users/Ksquare/Documents/Software/home/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nvar splitCSSVariableRegex =\n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(\\x2D\\x2D(?:([\\x2D0-9A-Z_a-z]+)|([\\x2D0-9A-Z_a-z]+), ?([ #%\\(\\),-\\.0-9A-Za-z]+))\\)/;\nfunction parseCSSVariable(current) {\n  var match = splitCSSVariableRegex.exec(current);\n  if (!match) return [,];\n  var _match = _slicedToArray(match, 4),\n    token1 = _match[1],\n    token2 = _match[2],\n    fallback = _match[3];\n  return [\"--\".concat(token1 !== null && token1 !== void 0 ? token1 : token2), fallback];\n}\nvar maxDepth = 4;\nfunction getVariableValue(current, element) {\n  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  invariant(depth <= maxDepth, \"Max CSS variable fallback depth detected in property \\\"\".concat(current, \"\\\". This may indicate a circular fallback dependency.\"));\n  var _parseCSSVariable = parseCSSVariable(current),\n    _parseCSSVariable2 = _slicedToArray(_parseCSSVariable, 2),\n    token = _parseCSSVariable2[0],\n    fallback = _parseCSSVariable2[1];\n  // No CSS variable detected\n  if (!token) return;\n  // Attempt to read this CSS variable off the element\n  var resolved = window.getComputedStyle(element).getPropertyValue(token);\n  if (resolved) {\n    var trimmed = resolved.trim();\n    return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n  }\n  return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;\n}\nexport { getVariableValue, parseCSSVariable };","map":{"version":3,"names":["invariant","isNumericalString","isCSSVariableToken","splitCSSVariableRegex","parseCSSVariable","current","match","exec","_match","_slicedToArray","token1","token2","fallback","concat","maxDepth","getVariableValue","element","depth","arguments","length","undefined","_parseCSSVariable","_parseCSSVariable2","token","resolved","window","getComputedStyle","getPropertyValue","trimmed","trim","parseFloat"],"sources":["/Users/Ksquare/Documents/Software/home/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs"],"sourcesContent":["import { invariant } from '../../../utils/errors.mjs';\nimport { isNumericalString } from '../../../utils/is-numerical-string.mjs';\nimport { isCSSVariableToken } from './is-css-variable.mjs';\n\n/**\n * Parse Framer's special CSS variable format into a CSS token and a fallback.\n *\n * ```\n * `var(--foo, #fff)` => [`--foo`, '#fff']\n * ```\n *\n * @param current\n */\nconst splitCSSVariableRegex = \n// eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words\n/^var\\(--(?:([\\w-]+)|([\\w-]+), ?([a-zA-Z\\d ()%#.,-]+))\\)/u;\nfunction parseCSSVariable(current) {\n    const match = splitCSSVariableRegex.exec(current);\n    if (!match)\n        return [,];\n    const [, token1, token2, fallback] = match;\n    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];\n}\nconst maxDepth = 4;\nfunction getVariableValue(current, element, depth = 1) {\n    invariant(depth <= maxDepth, `Max CSS variable fallback depth detected in property \"${current}\". This may indicate a circular fallback dependency.`);\n    const [token, fallback] = parseCSSVariable(current);\n    // No CSS variable detected\n    if (!token)\n        return;\n    // Attempt to read this CSS variable off the element\n    const resolved = window.getComputedStyle(element).getPropertyValue(token);\n    if (resolved) {\n        const trimmed = resolved.trim();\n        return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;\n    }\n    return isCSSVariableToken(fallback)\n        ? getVariableValue(fallback, element, depth + 1)\n        : fallback;\n}\n\nexport { getVariableValue, parseCSSVariable };\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,2BAA2B;AACrD,SAASC,iBAAiB,QAAQ,wCAAwC;AAC1E,SAASC,kBAAkB,QAAQ,uBAAuB;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,qBAAqB;AAC3B;AACA,yFAA0D;AAC1D,SAASC,gBAAgBA,CAACC,OAAO,EAAE;EAC/B,IAAMC,KAAK,GAAGH,qBAAqB,CAACI,IAAI,CAACF,OAAO,CAAC;EACjD,IAAI,CAACC,KAAK,EACN,OAAO,GAAG;EACd,IAAAE,MAAA,GAAAC,cAAA,CAAqCH,KAAK;IAAjCI,MAAM,GAAAF,MAAA;IAAEG,MAAM,GAAAH,MAAA;IAAEI,QAAQ,GAAAJ,MAAA;EACjC,OAAO,MAAAK,MAAA,CAAMH,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,KAAK,CAAC,GAAGA,MAAM,GAAGC,MAAM,GAAIC,QAAQ,CAAC;AACpF;AACA,IAAME,QAAQ,GAAG,CAAC;AAClB,SAASC,gBAAgBA,CAACV,OAAO,EAAEW,OAAO,EAAa;EAAA,IAAXC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACjDlB,SAAS,CAACiB,KAAK,IAAIH,QAAQ,4DAAAD,MAAA,CAA2DR,OAAO,0DAAsD,CAAC;EACpJ,IAAAgB,iBAAA,GAA0BjB,gBAAgB,CAACC,OAAO,CAAC;IAAAiB,kBAAA,GAAAb,cAAA,CAAAY,iBAAA;IAA5CE,KAAK,GAAAD,kBAAA;IAAEV,QAAQ,GAAAU,kBAAA;EACtB;EACA,IAAI,CAACC,KAAK,EACN;EACJ;EACA,IAAMC,QAAQ,GAAGC,MAAM,CAACC,gBAAgB,CAACV,OAAO,CAAC,CAACW,gBAAgB,CAACJ,KAAK,CAAC;EACzE,IAAIC,QAAQ,EAAE;IACV,IAAMI,OAAO,GAAGJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC/B,OAAO5B,iBAAiB,CAAC2B,OAAO,CAAC,GAAGE,UAAU,CAACF,OAAO,CAAC,GAAGA,OAAO;EACrE;EACA,OAAO1B,kBAAkB,CAACU,QAAQ,CAAC,GAC7BG,gBAAgB,CAACH,QAAQ,EAAEI,OAAO,EAAEC,KAAK,GAAG,CAAC,CAAC,GAC9CL,QAAQ;AAClB;AAEA,SAASG,gBAAgB,EAAEX,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}