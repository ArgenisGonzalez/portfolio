{"ast":null,"code":"import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n  var style = state.style,\n    vars = state.vars,\n    transformOrigin = state.transformOrigin;\n  // Track whether we encounter any transform or transformOrigin values.\n  var hasTransform = false;\n  var hasTransformOrigin = false;\n  /**\n   * Loop over all our latest animated values and decide whether to handle them\n   * as a style or CSS variable.\n   *\n   * Transforms and transform origins are kept separately for further processing.\n   */\n  for (var key in latestValues) {\n    var value = latestValues[key];\n    if (transformProps.has(key)) {\n      // If this is a transform, flag to enable further transform processing\n      hasTransform = true;\n      continue;\n    } else if (isCSSVariableName(key)) {\n      vars[key] = value;\n      continue;\n    } else {\n      // Convert the value to its default value type, ie 0 -> \"0px\"\n      var valueAsType = getValueAsType(value, numberValueTypes[key]);\n      if (key.startsWith(\"origin\")) {\n        // If this is a transform origin, flag and enable further transform-origin processing\n        hasTransformOrigin = true;\n        transformOrigin[key] = valueAsType;\n      } else {\n        style[key] = valueAsType;\n      }\n    }\n  }\n  if (!latestValues.transform) {\n    if (hasTransform || transformTemplate) {\n      style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n    } else if (style.transform) {\n      /**\n       * If we have previously created a transform but currently don't have any,\n       * reset transform style to none.\n       */\n      style.transform = \"none\";\n    }\n  }\n  /**\n   * Build a transformOrigin style. Uses the same defaults as the browser for\n   * undefined origins.\n   */\n  if (hasTransformOrigin) {\n    var _transformOrigin$orig = transformOrigin.originX,\n      originX = _transformOrigin$orig === void 0 ? \"50%\" : _transformOrigin$orig,\n      _transformOrigin$orig2 = transformOrigin.originY,\n      originY = _transformOrigin$orig2 === void 0 ? \"50%\" : _transformOrigin$orig2,\n      _transformOrigin$orig3 = transformOrigin.originZ,\n      originZ = _transformOrigin$orig3 === void 0 ? 0 : _transformOrigin$orig3;\n    style.transformOrigin = \"\".concat(originX, \" \").concat(originY, \" \").concat(originZ);\n  }\n}\nexport { buildHTMLStyles };","map":{"version":3,"names":["buildTransform","isCSSVariableName","transformProps","getValueAsType","numberValueTypes","buildHTMLStyles","state","latestValues","transformTemplate","style","vars","transformOrigin","hasTransform","hasTransformOrigin","key","value","has","valueAsType","startsWith","transform","_transformOrigin$orig","originX","_transformOrigin$orig2","originY","_transformOrigin$orig3","originZ","concat"],"sources":["/Users/Ksquare/Documents/Software/home/node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs"],"sourcesContent":["import { buildTransform } from './build-transform.mjs';\nimport { isCSSVariableName } from '../../dom/utils/is-css-variable.mjs';\nimport { transformProps } from './transform.mjs';\nimport { getValueAsType } from '../../dom/value-types/get-as-type.mjs';\nimport { numberValueTypes } from '../../dom/value-types/number.mjs';\n\nfunction buildHTMLStyles(state, latestValues, transformTemplate) {\n    const { style, vars, transformOrigin } = state;\n    // Track whether we encounter any transform or transformOrigin values.\n    let hasTransform = false;\n    let hasTransformOrigin = false;\n    /**\n     * Loop over all our latest animated values and decide whether to handle them\n     * as a style or CSS variable.\n     *\n     * Transforms and transform origins are kept separately for further processing.\n     */\n    for (const key in latestValues) {\n        const value = latestValues[key];\n        if (transformProps.has(key)) {\n            // If this is a transform, flag to enable further transform processing\n            hasTransform = true;\n            continue;\n        }\n        else if (isCSSVariableName(key)) {\n            vars[key] = value;\n            continue;\n        }\n        else {\n            // Convert the value to its default value type, ie 0 -> \"0px\"\n            const valueAsType = getValueAsType(value, numberValueTypes[key]);\n            if (key.startsWith(\"origin\")) {\n                // If this is a transform origin, flag and enable further transform-origin processing\n                hasTransformOrigin = true;\n                transformOrigin[key] =\n                    valueAsType;\n            }\n            else {\n                style[key] = valueAsType;\n            }\n        }\n    }\n    if (!latestValues.transform) {\n        if (hasTransform || transformTemplate) {\n            style.transform = buildTransform(latestValues, state.transform, transformTemplate);\n        }\n        else if (style.transform) {\n            /**\n             * If we have previously created a transform but currently don't have any,\n             * reset transform style to none.\n             */\n            style.transform = \"none\";\n        }\n    }\n    /**\n     * Build a transformOrigin style. Uses the same defaults as the browser for\n     * undefined origins.\n     */\n    if (hasTransformOrigin) {\n        const { originX = \"50%\", originY = \"50%\", originZ = 0, } = transformOrigin;\n        style.transformOrigin = `${originX} ${originY} ${originZ}`;\n    }\n}\n\nexport { buildHTMLStyles };\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uBAAuB;AACtD,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,cAAc,QAAQ,iBAAiB;AAChD,SAASC,cAAc,QAAQ,uCAAuC;AACtE,SAASC,gBAAgB,QAAQ,kCAAkC;AAEnE,SAASC,eAAeA,CAACC,KAAK,EAAEC,YAAY,EAAEC,iBAAiB,EAAE;EAC7D,IAAQC,KAAK,GAA4BH,KAAK,CAAtCG,KAAK;IAAEC,IAAI,GAAsBJ,KAAK,CAA/BI,IAAI;IAAEC,eAAe,GAAKL,KAAK,CAAzBK,eAAe;EACpC;EACA,IAAIC,YAAY,GAAG,KAAK;EACxB,IAAIC,kBAAkB,GAAG,KAAK;EAC9B;AACJ;AACA;AACA;AACA;AACA;EACI,KAAK,IAAMC,GAAG,IAAIP,YAAY,EAAE;IAC5B,IAAMQ,KAAK,GAAGR,YAAY,CAACO,GAAG,CAAC;IAC/B,IAAIZ,cAAc,CAACc,GAAG,CAACF,GAAG,CAAC,EAAE;MACzB;MACAF,YAAY,GAAG,IAAI;MACnB;IACJ,CAAC,MACI,IAAIX,iBAAiB,CAACa,GAAG,CAAC,EAAE;MAC7BJ,IAAI,CAACI,GAAG,CAAC,GAAGC,KAAK;MACjB;IACJ,CAAC,MACI;MACD;MACA,IAAME,WAAW,GAAGd,cAAc,CAACY,KAAK,EAAEX,gBAAgB,CAACU,GAAG,CAAC,CAAC;MAChE,IAAIA,GAAG,CAACI,UAAU,CAAC,QAAQ,CAAC,EAAE;QAC1B;QACAL,kBAAkB,GAAG,IAAI;QACzBF,eAAe,CAACG,GAAG,CAAC,GAChBG,WAAW;MACnB,CAAC,MACI;QACDR,KAAK,CAACK,GAAG,CAAC,GAAGG,WAAW;MAC5B;IACJ;EACJ;EACA,IAAI,CAACV,YAAY,CAACY,SAAS,EAAE;IACzB,IAAIP,YAAY,IAAIJ,iBAAiB,EAAE;MACnCC,KAAK,CAACU,SAAS,GAAGnB,cAAc,CAACO,YAAY,EAAED,KAAK,CAACa,SAAS,EAAEX,iBAAiB,CAAC;IACtF,CAAC,MACI,IAAIC,KAAK,CAACU,SAAS,EAAE;MACtB;AACZ;AACA;AACA;MACYV,KAAK,CAACU,SAAS,GAAG,MAAM;IAC5B;EACJ;EACA;AACJ;AACA;AACA;EACI,IAAIN,kBAAkB,EAAE;IACpB,IAAAO,qBAAA,GAA2DT,eAAe,CAAlEU,OAAO;MAAPA,OAAO,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;MAAAE,sBAAA,GAAoCX,eAAe,CAAjDY,OAAO;MAAPA,OAAO,GAAAD,sBAAA,cAAG,KAAK,GAAAA,sBAAA;MAAAE,sBAAA,GAAmBb,eAAe,CAAhCc,OAAO;MAAPA,OAAO,GAAAD,sBAAA,cAAG,CAAC,GAAAA,sBAAA;IACrDf,KAAK,CAACE,eAAe,MAAAe,MAAA,CAAML,OAAO,OAAAK,MAAA,CAAIH,OAAO,OAAAG,MAAA,CAAID,OAAO,CAAE;EAC9D;AACJ;AAEA,SAASpB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}