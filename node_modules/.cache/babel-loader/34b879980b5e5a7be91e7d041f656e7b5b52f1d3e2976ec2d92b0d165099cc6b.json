{"ast":null,"code":"import { color } from '../color/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\nfunction test(v) {\n  var _a, _b;\n  return isNaN(v) && isString(v) && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\nvar NUMBER_TOKEN = \"number\";\nvar COLOR_TOKEN = \"color\";\nvar VAR_TOKEN = \"var\";\nvar VAR_FUNCTION_TOKEN = \"var(\";\nvar SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nvar complexRegex = /var[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*\\([\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*\\x2D\\x2D(?:[\\x2D0-9A-Z_a-z\\u017F\\u212A]+[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*|[\\x2D0-9A-Z_a-z\\u017F\\u212A]+[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*,(?:[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*(?:(?![\\t-\\r \\(\\)\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uD800-\\uDFFF\\uFEFF])[\\s\\S]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])|[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*\\((?:(?:(?![\\(\\)\\uD800-\\uDFFF])[\\s\\S]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])|\\((?:(?![\\(\\)\\uD800-\\uDFFF])[\\s\\S]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])*\\))*\\))+[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*)\\)|#[0-9a-f]{3,8}|(?:rgb|h[s\\u017F]l)a?\\((?:\\x2D?[\\.0-9]+%?[\\t-\\r ,\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]+){2}\\x2D?[\\.0-9]+%?[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*(?:[,\\/][\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]*)?(?:\\b[0-9]+(?:\\.[0-9]+)?|\\.[0-9]+)?%?\\)|\\x2D?(?:[0-9]+(?:\\.[0-9]+)?|\\.[0-9]+)/gi;\nfunction analyseComplexValue(value) {\n  var originalValue = value.toString();\n  var values = [];\n  var indexes = {\n    color: [],\n    number: [],\n    var: []\n  };\n  var types = [];\n  var i = 0;\n  var tokenised = originalValue.replace(complexRegex, function (parsedValue) {\n    if (color.test(parsedValue)) {\n      indexes.color.push(i);\n      types.push(COLOR_TOKEN);\n      values.push(color.parse(parsedValue));\n    } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n      indexes.var.push(i);\n      types.push(VAR_TOKEN);\n      values.push(parsedValue);\n    } else {\n      indexes.number.push(i);\n      types.push(NUMBER_TOKEN);\n      values.push(parseFloat(parsedValue));\n    }\n    ++i;\n    return SPLIT_TOKEN;\n  });\n  var split = tokenised.split(SPLIT_TOKEN);\n  return {\n    values: values,\n    split: split,\n    indexes: indexes,\n    types: types\n  };\n}\nfunction parseComplexValue(v) {\n  return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n  var _analyseComplexValue = analyseComplexValue(source),\n    split = _analyseComplexValue.split,\n    types = _analyseComplexValue.types;\n  var numSections = split.length;\n  return function (v) {\n    var output = \"\";\n    for (var i = 0; i < numSections; i++) {\n      output += split[i];\n      if (v[i] !== undefined) {\n        var type = types[i];\n        if (type === NUMBER_TOKEN) {\n          output += sanitize(v[i]);\n        } else if (type === COLOR_TOKEN) {\n          output += color.transform(v[i]);\n        } else {\n          output += v[i];\n        }\n      }\n    }\n    return output;\n  };\n}\nvar convertNumbersToZero = function convertNumbersToZero(v) {\n  return typeof v === \"number\" ? 0 : v;\n};\nfunction getAnimatableNone(v) {\n  var parsed = parseComplexValue(v);\n  var transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\nvar complex = {\n  test: test,\n  parse: parseComplexValue,\n  createTransformer: createTransformer,\n  getAnimatableNone: getAnimatableNone\n};\nexport { analyseComplexValue, complex };","map":{"version":3,"names":["color","isString","floatRegex","colorRegex","sanitize","test","v","_a","_b","isNaN","match","length","NUMBER_TOKEN","COLOR_TOKEN","VAR_TOKEN","VAR_FUNCTION_TOKEN","SPLIT_TOKEN","complexRegex","analyseComplexValue","value","originalValue","toString","values","indexes","number","var","types","i","tokenised","replace","parsedValue","push","parse","startsWith","parseFloat","split","parseComplexValue","createTransformer","source","_analyseComplexValue","numSections","output","undefined","type","transform","convertNumbersToZero","getAnimatableNone","parsed","transformer","map","complex"],"sources":["/Users/Ksquare/Documents/Software/home/node_modules/framer-motion/dist/es/value/types/complex/index.mjs"],"sourcesContent":["import { color } from '../color/index.mjs';\nimport { isString, floatRegex, colorRegex, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst NUMBER_TOKEN = \"number\";\nconst COLOR_TOKEN = \"color\";\nconst VAR_TOKEN = \"var\";\nconst VAR_FUNCTION_TOKEN = \"var(\";\nconst SPLIT_TOKEN = \"${}\";\n// this regex consists of the `singleCssVariableRegex|rgbHSLValueRegex|digitRegex`\nconst complexRegex = /var\\s*\\(\\s*--(?:[\\w-]+\\s*|[\\w-]+\\s*,(?:\\s*[^)(\\s]|\\s*\\((?:[^)(]|\\([^)(]*\\))*\\))+\\s*)\\)|#[\\da-f]{3,8}|(?:rgb|hsl)a?\\((?:-?[\\d.]+%?[,\\s]+){2}-?[\\d.]+%?\\s*(?:[,/]\\s*)?(?:\\b\\d+(?:\\.\\d+)?|\\.\\d+)?%?\\)|-?(?:\\d+(?:\\.\\d+)?|\\.\\d+)/giu;\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const values = [];\n    const indexes = {\n        color: [],\n        number: [],\n        var: [],\n    };\n    const types = [];\n    let i = 0;\n    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {\n        if (color.test(parsedValue)) {\n            indexes.color.push(i);\n            types.push(COLOR_TOKEN);\n            values.push(color.parse(parsedValue));\n        }\n        else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {\n            indexes.var.push(i);\n            types.push(VAR_TOKEN);\n            values.push(parsedValue);\n        }\n        else {\n            indexes.number.push(i);\n            types.push(NUMBER_TOKEN);\n            values.push(parseFloat(parsedValue));\n        }\n        ++i;\n        return SPLIT_TOKEN;\n    });\n    const split = tokenised.split(SPLIT_TOKEN);\n    return { values, split, indexes, types };\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { split, types } = analyseComplexValue(source);\n    const numSections = split.length;\n    return (v) => {\n        let output = \"\";\n        for (let i = 0; i < numSections; i++) {\n            output += split[i];\n            if (v[i] !== undefined) {\n                const type = types[i];\n                if (type === NUMBER_TOKEN) {\n                    output += sanitize(v[i]);\n                }\n                else if (type === COLOR_TOKEN) {\n                    output += color.transform(v[i]);\n                }\n                else {\n                    output += v[i];\n                }\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}