{"ast":null,"code":"import _objectSpread from \"/Users/Ksquare/Documents/Software/home/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { mixNumber } from './number.mjs';\nimport { warning } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  var expo = v * (to * to - fromExpo) + fromExpo;\n  return expo < 0 ? 0 : Math.sqrt(expo);\n};\nvar colorTypes = [hex, rgba, hsla];\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\nfunction asRGBA(color) {\n  var type = getColorType(color);\n  warning(Boolean(type), \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\"));\n  if (!Boolean(type)) return false;\n  var model = type.parse(color);\n  if (type === hsla) {\n    // TODO Remove this cast - needed since Framer Motion's stricter typing\n    model = hslaToRgba(model);\n  }\n  return model;\n}\nvar mixColor = function mixColor(from, to) {\n  var fromRGBA = asRGBA(from);\n  var toRGBA = asRGBA(to);\n  if (!fromRGBA || !toRGBA) {\n    return mixImmediate(from, to);\n  }\n  var blended = _objectSpread({}, fromRGBA);\n  return function (v) {\n    blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n    blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n    blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n    blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n    return rgba.transform(blended);\n  };\n};\nexport { mixColor, mixLinearColor };","map":{"version":3,"names":["mixNumber","warning","hslaToRgba","hex","rgba","hsla","mixImmediate","mixLinearColor","from","to","v","fromExpo","expo","Math","sqrt","colorTypes","getColorType","find","type","test","asRGBA","color","Boolean","concat","model","parse","mixColor","fromRGBA","toRGBA","blended","_objectSpread","red","green","blue","alpha","transform"],"sources":["/Users/Ksquare/Documents/Software/home/node_modules/framer-motion/dist/es/utils/mix/color.mjs"],"sourcesContent":["import { mixNumber } from './number.mjs';\nimport { warning } from '../errors.mjs';\nimport { hslaToRgba } from '../hsla-to-rgba.mjs';\nimport { hex } from '../../value/types/color/hex.mjs';\nimport { rgba } from '../../value/types/color/rgba.mjs';\nimport { hsla } from '../../value/types/color/hsla.mjs';\nimport { mixImmediate } from './immediate.mjs';\n\n// Linear color space blending\n// Explained https://www.youtube.com/watch?v=LKnqECcg6Gw\n// Demonstrated http://codepen.io/osublake/pen/xGVVaN\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const expo = v * (to * to - fromExpo) + fromExpo;\n    return expo < 0 ? 0 : Math.sqrt(expo);\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nfunction asRGBA(color) {\n    const type = getColorType(color);\n    warning(Boolean(type), `'${color}' is not an animatable color. Use the equivalent color code instead.`);\n    if (!Boolean(type))\n        return false;\n    let model = type.parse(color);\n    if (type === hsla) {\n        // TODO Remove this cast - needed since Framer Motion's stricter typing\n        model = hslaToRgba(model);\n    }\n    return model;\n}\nconst mixColor = (from, to) => {\n    const fromRGBA = asRGBA(from);\n    const toRGBA = asRGBA(to);\n    if (!fromRGBA || !toRGBA) {\n        return mixImmediate(from, to);\n    }\n    const blended = { ...fromRGBA };\n    return (v) => {\n        blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v);\n        blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v);\n        blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v);\n        blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v);\n        return rgba.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,cAAc;AACxC,SAASC,OAAO,QAAQ,eAAe;AACvC,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,GAAG,QAAQ,iCAAiC;AACrD,SAASC,IAAI,QAAQ,kCAAkC;AACvD,SAASC,IAAI,QAAQ,kCAAkC;AACvD,SAASC,YAAY,QAAQ,iBAAiB;;AAE9C;AACA;AACA;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,IAAI,EAAEC,EAAE,EAAEC,CAAC,EAAK;EACpC,IAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAI;EAC5B,IAAMI,IAAI,GAAGF,CAAC,IAAID,EAAE,GAAGA,EAAE,GAAGE,QAAQ,CAAC,GAAGA,QAAQ;EAChD,OAAOC,IAAI,GAAG,CAAC,GAAG,CAAC,GAAGC,IAAI,CAACC,IAAI,CAACF,IAAI,CAAC;AACzC,CAAC;AACD,IAAMG,UAAU,GAAG,CAACZ,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;AACpC,IAAMW,YAAY,GAAG,SAAfA,YAAYA,CAAIN,CAAC;EAAA,OAAKK,UAAU,CAACE,IAAI,CAAC,UAACC,IAAI;IAAA,OAAKA,IAAI,CAACC,IAAI,CAACT,CAAC,CAAC;EAAA,EAAC;AAAA;AACnE,SAASU,MAAMA,CAACC,KAAK,EAAE;EACnB,IAAMH,IAAI,GAAGF,YAAY,CAACK,KAAK,CAAC;EAChCpB,OAAO,CAACqB,OAAO,CAACJ,IAAI,CAAC,MAAAK,MAAA,CAAMF,KAAK,yEAAsE,CAAC;EACvG,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC,EACd,OAAO,KAAK;EAChB,IAAIM,KAAK,GAAGN,IAAI,CAACO,KAAK,CAACJ,KAAK,CAAC;EAC7B,IAAIH,IAAI,KAAKb,IAAI,EAAE;IACf;IACAmB,KAAK,GAAGtB,UAAU,CAACsB,KAAK,CAAC;EAC7B;EACA,OAAOA,KAAK;AAChB;AACA,IAAME,QAAQ,GAAG,SAAXA,QAAQA,CAAIlB,IAAI,EAAEC,EAAE,EAAK;EAC3B,IAAMkB,QAAQ,GAAGP,MAAM,CAACZ,IAAI,CAAC;EAC7B,IAAMoB,MAAM,GAAGR,MAAM,CAACX,EAAE,CAAC;EACzB,IAAI,CAACkB,QAAQ,IAAI,CAACC,MAAM,EAAE;IACtB,OAAOtB,YAAY,CAACE,IAAI,EAAEC,EAAE,CAAC;EACjC;EACA,IAAMoB,OAAO,GAAAC,aAAA,KAAQH,QAAQ,CAAE;EAC/B,OAAO,UAACjB,CAAC,EAAK;IACVmB,OAAO,CAACE,GAAG,GAAGxB,cAAc,CAACoB,QAAQ,CAACI,GAAG,EAAEH,MAAM,CAACG,GAAG,EAAErB,CAAC,CAAC;IACzDmB,OAAO,CAACG,KAAK,GAAGzB,cAAc,CAACoB,QAAQ,CAACK,KAAK,EAAEJ,MAAM,CAACI,KAAK,EAAEtB,CAAC,CAAC;IAC/DmB,OAAO,CAACI,IAAI,GAAG1B,cAAc,CAACoB,QAAQ,CAACM,IAAI,EAAEL,MAAM,CAACK,IAAI,EAAEvB,CAAC,CAAC;IAC5DmB,OAAO,CAACK,KAAK,GAAGlC,SAAS,CAAC2B,QAAQ,CAACO,KAAK,EAAEN,MAAM,CAACM,KAAK,EAAExB,CAAC,CAAC;IAC1D,OAAON,IAAI,CAAC+B,SAAS,CAACN,OAAO,CAAC;EAClC,CAAC;AACL,CAAC;AAED,SAASH,QAAQ,EAAEnB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}